name: Build and Release (Path Filtered)

on:
  # Build on push to main with source changes
  push:
    branches:
      - main
    paths:
      - '**.rs'
      - '**.toml'
      - 'Cargo.lock'
      - '.github/workflows/**'
      - 'scripts/**'
      - 'node/**'
      - 'runtime/**'
      - 'client/**'
  
  # Always build on tags (for releases)
  push:
    tags:
      - 'v*'
      
  # Allow manual triggering
  workflow_dispatch:

# Prevent concurrent builds for the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Explicitly declare permissions
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # Job to check if we should build
  changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.filter.outputs.should-build }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for code changes
        id: filter
        run: |
          # Always build for tags and manual dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: changes
    if: needs.changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            arch: aarch64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.75.0
      with:
        targets: ${{ matrix.target }}
        components: rust-src

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config protobuf-compiler libclang-dev

    - name: Install cross-compilation tools
      if: matrix.arch == 'aarch64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Build
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
        CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        CARGO_TARGET_DIR: target
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Package binary and create checksums
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf d9-node-${{ matrix.arch }}-linux.tar.gz d9-node
        sha256sum d9-node-${{ matrix.arch }}-linux.tar.gz > d9-node-${{ matrix.arch }}-linux.tar.gz.sha256
        mv d9-node-${{ matrix.arch }}-linux.tar.gz* ../../../

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: d9-node-${{ matrix.arch }}-linux
        path: |
          d9-node-${{ matrix.arch }}-linux.tar.gz
          d9-node-${{ matrix.arch }}-linux.tar.gz.sha256
        retention-days: 7

  # Simplified notification job
  notify:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    
    steps:
    - name: Build Status Notification
      run: |
        echo "Build completed with status: ${{ needs.build.result }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch/Tag: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"

  release:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Validate version tag
      run: |
        if ! [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
          echo "Invalid version tag format. Expected: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          d9-node-x86_64-linux/d9-node-x86_64-linux.tar.gz
          d9-node-x86_64-linux/d9-node-x86_64-linux.tar.gz.sha256
          d9-node-aarch64-linux/d9-node-aarch64-linux.tar.gz
          d9-node-aarch64-linux/d9-node-aarch64-linux.tar.gz.sha256
      env:
        GITHUB_TOKEN: ${{ github.token }}