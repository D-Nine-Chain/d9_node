name: Build and Release (Act Compatible)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Show environment
      run: |
        echo "Running on architecture: $(uname -m)"
        echo "Target: ${{ matrix.target }}"
        echo "Arch: ${{ matrix.arch }}"

    - name: Build placeholder
      run: |
        echo "Would build for ${{ matrix.target }}"
        mkdir -p target/${{ matrix.target }}/release
        echo "fake binary" > target/${{ matrix.target }}/release/d9-node
        cd target/${{ matrix.target }}/release
        tar -czf d9-node-${{ matrix.arch }}-linux.tar.gz d9-node
        sha256sum d9-node-${{ matrix.arch }}-linux.tar.gz > d9-node-${{ matrix.arch }}-linux.tar.gz.sha256
        mv d9-node-${{ matrix.arch }}-linux.tar.gz* ../../../
        ls -la ../../../

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Discord Notification Simple
      run: |
        echo "Discord notification placeholder"
        echo "Build result: ${{ needs.build.result }}"
        
    - name: Test secrets
      env:
        TEST_SECRET: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ -n "$TEST_SECRET" ]; then
          echo "Secret is set"
        else
          echo "Secret is not set"
        fi

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Validate version tag
      run: |
        echo "Validating tag: ${{ github.ref_name }}"
        if ! [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
          echo "Invalid version tag format. Expected: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi

    - name: Create release placeholder
      run: |
        echo "Would create release for tag ${{ github.ref_name }}"